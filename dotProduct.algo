//procedure

PROCEDURE dot_product(var v1: ARRAY_OF FLOAT[2], v2: ARRAY_OF FLOAT[2])
VAR
    ps : FLOAT;
    i: INTEGER;
BEGIN
    ps:=0;
    FOR i FROM 0 TO 2 STEP 1  DO
        ps:= ps+ v1[i]*v2[i];
    END_FOR
    read(ps); 
END

ALGORITHM orthogonal vectors
VAR
    v: ARRAY_OF FLOAT[2];
    n : INTEGER;
    i : INTEGER;
    j : INTEGER;
BEGIN
    write ("number of vectors is :");
    read(n);
    FOR i FROM 0 TO n-1 STEP 1  DO
        FOR j FROM 0 TO 2 STEP 1  DO
            write("write the elelments : ",j+1 ,"of the vector v", i+1);
            read(vi[j]);
        END_FOR
    END_FOR
    FOR i FROM 0 TO n-2 STEP 1 DO
        FOR j FROM i+1 TO n-1 STEP 1  DO
            IF (dot_product(vi,vj) = 0) THEN
                write(vi,"and",vj,"are orthogonal");
            END_IF
        END_FOR
    END_FOR
END

//function 
FUNCTION dot_product(var v1: ARRAY_OF FLOAT[2], v2: ARRAY_OF FLOAT[2]) : FLOAT
VAR
    ps : FLOAT;
    i: INTEGER;
BEGIN
    ps:=0;
    FOR i FROM 0 TO 2 STEP 1  DO
        ps:= ps+ v1[i]*v2[i];
    END_FOR
    RETURN ps ;
END


ALGORITHM orthogonal vectors
VAR
    v : ARRAY_OF FLOAT[2];
    ps : FLOAT;
    n : INTEGER;
    i : INTEGER;
    j : INTEGER;
BEGIN
    write ("number of vectors is :");
    read(n);
    FOR i FROM 0 TO n-1 STEP 1  DO
        FOR j FROM 0 TO 2 STEP 1  DO
            write("write the elelments : ",j+1 ,"of the vector v", i+1);
            read(vi[j]);
        END_FOR
    END_FOR
    FOR i FROM 0 TO n-2 STEP 1 DO
        FOR j FROM i+1 TO n-1 STEP 1  DO
            ps :=dot_product(vi,vj);
            IF (ps = 0) THEN
                write(vi,"and",vj,"are orthogonal");
            END_IF
        END_FOR
    END_FOR
END